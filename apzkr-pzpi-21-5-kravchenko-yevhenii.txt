Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук

Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для управління парковками житлових комплексів та офісів

Студент гр. ПЗПІ-21-5
_________________ Кравченко Є.Р.
(підпис)
Керівник роботи
_________________ ст. викл. Сокорчук І.П.
(підпис)

Роботу захищено «__»_________2024 р.
з оцінкою _________________________

Комісія:
_________________ доц. Лещинський В.О.
(підпис)

_________________ доц. Лещинська І.О.
(підпис)

_________________ ст. викл. Сокорчук І.П.
(підпис)



Харків
2024 р.
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук__________ Кафедра програмної інженерії______
Спеціальність 121 – Інженерія програмного забезпечення____________________
Курс ______3 ______ Семестр ________________________6________________________
Навчальна дисципліна Архітектура програмного забезпечення_______________

ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ

_________________________Кравченку Євгенію Романовичу_____________________
1. Тема роботи: «Програмна система для управління парковками житлових комплексів та офісів»_____________________________________________________
2. Термін узгодження завдання курсової роботи «_08_»__квітня__ 2024 р.
3. Термін здачі студентом закінченої роботи «_14_»__червня__ 2024 р.
4. Вихідні дані до проекту (роботи): В програмній системі передбачити: авторизацію та реєстрацію користувачів системи (водіїв, адміністраторів парковки та системних адміністраторів); інструменти управління парковкою житлових комплексів та офісів; бронювання паркувальних місць; налаштування тарифів на паркування; налаштування абонементів та їх блокування; генерацію звітів про використання парковки, надходження коштів; завантаження даних користувачів у систему; створення резервних копій даних; управління розумними бар’єрами (шлагбаум); перегляд історії паркувань та транзакцій; оплата абонементів та рахунків. Використовувати: ОС Windows 10, СУБД Microsoft SQL Server 2022; мови програмування C#, C++, TypeScript, Kotlin; фреймворки PlatformIO, Angular 17; середовища розробки Microsoft Visual Studio 2022, Visual Studio Code, Android Studio._____________________________
5. Зміст пояснювальної записки (перелік питань, що належить розробити): вступ, бізнес вимоги, концепція рішення, рамки та обмеження проекту, бізнес контекст, серверна частина, пристрій інтернету речей, клієнтська частина, висновки, перелік посилань, додатки.____________________________
6. Перелік графічного матеріалу (з точним зазначенням обов’язкових креслень): схема моделі бази даних, діаграми прецедентів, діаграма розгортання, діаграми компонентів, діаграми діяльності, діаграми взаємодії._________________________________________________________________


КАЛЕНДАРНИЙ ПЛАН


№
Назва етапів курсової роботи
Термін виконання етапів роботи
Примітка
1
Функціональна специфікація програмного продукту
20.04.2024
виконано
2
Проектування програмного проекту
27.04.2024
виконано
3
Кодування програмного проекту
01.06.2024
виконано
4
Оформлення пояснювальної записки
07.06.2024
виконано
5
Захист курсової роботи
14.06.2024
виконано

     Дата видачі завдання «_08_»____квітня____ 2024 р.
     
Керівник
______________ ст. викл. Сокорчук І.П.
(підпис)
Завдання прийняв до виконання ст. гр. ПЗПІ-21-5

______________ Кравченко Є.Р.
(підпис)



РЕФЕРАТ


     Пояснювальна записка до курсової роботи: 38 с., 3 рис., 2 табл., додатків, 6 джерел.
     ПАРКУВАННЯ, ПАРКОВКА, СИСТЕМА УПРАВЛІННЯ, АВТОМАТИЗАЦІЯ, ЖИТЛОВІ КОМПЛЕКСИ, ОФІСИ, ІНТЕРНЕТ РЕЧЕЙ, C#, ПЛАТФОРМА .NET, MICROSOFT SQL SERVER, ANGULAR.
     Об’єктом дослідження виступає автоматизація та покращення процесу управління парковками житлових комплексів та офісів, поліпшення досвіду користування сервісами паркування мешканців і працівників та спрощення отримання звітності.
     Для дослідження використовуються такі методи: аналіз предметної області, концептуальне, UML- та ER-моделювання.
     Метою роботи є створення складної програмної системи для автоматизації процесів управління парковками житлових комплексів та офісів. Система має такі складові: сервер, IoT-частина, веб-клієнт та мобільний застосунок.
     Серед технологій для розробки можна виділити наступні: платформа .NET Core 8, фреймворк ASP NET Core 8 та C# для серверної частини; СУБД Microsoft SQL Server 2022 у якості бази даних; ORM Entity Framework Core 8 для доступу до даних; фреймворк PlatformIO та мова програмування C++ для IoT-частини; фреймворк Angular 17, HTML, SCSS та мова програмування TypeScript для веб-частини.
     У результаті дослідження та курсового проектування було створено програмну систему, що спрощує управління парковками житлових комплексів та офісів, дозволяє легко та ефективно ними керувати, контролює доступ до місць для паркування, надає звітність та покращує досвід використання сервісів паркування.


ЗМІСТ





ВСТУП


     Населення невпинно росте кожного дня і, як наслідок, будуються нові міста, розширюються існуючі, збільшується також і кількість транспортних засобів. Проблема паркування у сучасних містах стає дедалі гострішою через обмеженість місць для паркування. 
     Станом на 2024 рік кількість автомобілів у світі становить близько півтора мільярда одиниць. За даними дослідження «Who Owns the Most Vehicles per Capita, by Country?» [1], що опубліковано на сайті «Visual Capitalist», найбільша кількість транспортних засобів на душу населення зафіксована в таких країнах, як США та Нова Зеландія, де цей показник перевищує 850 автомобілів на 1000 осіб. Також важливо зазначити, що зростання цього рівня продовжується і надалі. Наприклад, у В’єтнамі рівень володіння транспортними засобами зростає на 17% щорічно, в Китаї – на 14%, а в Індії – на 10%.
     Зростання кількості автомобілів і обмеженість місць для паркування призводить до збільшення часу пошуку вільного місця, утворення черг на оплату рахунків під час виїзду, заторів, підвищення рівня стресу у водіїв, та негативного впливу на довкілля через викиди у атмосферу. Неефективне управління парковками та використання доступних місць для паркування також має поганий вплив. До того ж, зі збільшенням розмірів парковок, управляти ними стає дедалі важче. Рішенням даних проблем стане система, що дозволяє ефективно управляти стоянками, надає водіям впевненість, що вони зможуть припаркувати свій автомобіль, завдяки контрольованому доступу та можливістю забронювати собі місце. Змога оплатити рахунок із мобільного застосунку значно пришвидшить процес виїзду.
     Найбільшу кількість часу людина проводить вдома та на роботі і тому вирішення вищезгаданих проблем для парковок житлових комплексів та офісів має велике значення.
     Тема роботи – створення програмної системи для управління парковками житлових комплексів та офісів.
     Мета роботи – реалізація інформаційної системи, що надає інструменти для спрощення управління, отримання статистики використання парковки, забезпечує контрольований доступ, дає можливість оплачувати рахунки за допомогою мобільного застосунку та відповідає сучасним вимогам ринку і стандартам розробки програмного забезпечення.
     В рамкам курсового проектування буде розглянуто існуючі рішення на ринку, визначені основні вимоги до системи, що розроблюється, та спроектовано відповідну архітектуру. Задля перевірки працездатності системи буде проведено функціональне тестування.


1 БІЗНЕС-ВИМОГИ
     1.1 Передумови
     
     
     Парковки сьогодні відіграють важливу роль у забезпеченні комфорту та ефективності життя в житлових комплексах та офісних приміщеннях. Постійне збільшення населення, кількості транспортних засобів, а також зростання вимог людей до зручності створює необхідність вдосконалення систем управління. Люди стикаються з недостатньою кількістю паркувальних місць, нерідко виникають конфлікти через неподілене місце, а відсутність адекватного контролю призводить до того, що парковкою біля офісу чи дому можуть скористатися сторонні люди. Конфлікти викликають стрес, що може негативно вплинути на продуктивніть співробітників протягом дня. Для пошуку вільного місця необхідно витрачати додатковий час, що також призводить до збільшення шкоди навколишньому середовищу через викиди автомобілів. Окрім цього, чим більша парковка за розміром, тим важче персоналу управляти нею. Отже, існує потреба у надійних та легких у експлуатації системах управління парковками, а автоматизація пов’язаних процесів стає все більш важливою для забезпечення ефективного використання простору, оптимізації ресурсів, збереження навколишнього середовища і зручності мешканців та співробітників.
     
     
     1.2 Бізнес-можливості
     
     
     Зі зростанням населення розвиваються міста, будуються нові житлові комплекси та офісні приміщення. Зростання кількості останніх призводить до необхідності ефективного управління парковками, які часто стають обмеженим ресурсом у містах. «Parky» орієнтується на ринок систем автоматизації, спрямованих на оптимізацію управління парковками біля житлових комплексів та офісних приміщень.
     Звичайно, що «Parky» не єдина система управління парковками на сучасному ринку. Проте, вона надає широкий спектр послуг та можливостей і може конкурувати з уже існуючими аналогами.
     Компанія «Parklio» спеціалізується на розробці розумних бар’єрів та пропонує різні рішення для управління парковками. Автоматичними бар’єрами можна керувати зі смартфону. Мобільний застосунок дозволяє користувачам самостійно керувати парковочними місцями. Систему також можна інтегрувати з платіжними системами для забезпечення оплати за паркування онлайн. Однак, встановлення бар’єрів може бути високовартісним та складним процесом, що робить їх недоступними для клієнтів з обмеженим бюджетом. До того ж, «Parklio» не надає широкого спектру персоналізації, що може бути важливим критерієм для парковок житлових комплексів.
     «SpotHero» – це онлайн-платформа та мобільний застосунок для пошуку та резервування парковочних місць. Дане рішення пропонує зручні інструменти для пошуку парковочних місць у реальному часі. Користувачі також мають змогу забронювати місце через застосунок, щоб забезпечити собі гарантоване паркування, і сплачувати рахунки онлайн. Однак, дана система має певні недоліки. По-перше, тарифи на паркування встановлюються місцевою владою та власниками парковок. Як результат, ціни можуть суттєво різнитися, що може ускладнити пошук парковочного місця у певних містах. По-друге, сервіс «SpotHero» має обмежену доступність. На сьогодні, він доступний лише у близько трьохста містах США та Канади, що робить його недоступним для великої кількості потенційних клієнтів. До того ж, «SpotHero» орієнтований на публічні парковки і не може повноцінно задовільнити потреби приватних парковок, наприклад таких, що знаходяться біля багатоквартирних будівель або офісних приміщень.
     Система управління парковками «Parky» передбачає монетизацію за рахунок продажу ліцензій на використання програмного забезпечення, вартість якої визначається розміром парковки, обсягом функціоналу та рівнем підтримки. Для залучення клієнтів будуть проводитися активні маркетингові кампанії. Також є можливість подальшого розвитку системи з метою задовільнити потреби ще одного сегменту клієнтів – навчальних закладів із власною парковкою.
     
     
     1.3 Бізнес-цілі та критерії
     
     
     BO-1: Підвищити ефективність використання парковочного простору біля житлових комплексів та офісів на 30% протягом першого року.
     BO-2: Забезпечити високий рівень задоволеності користувачів сервісом паркування.
     BO-3: Зменшити кількість конфліктних ситуацій, що виникають через паркувальні місця на 45% протягом першого року.
     BO-4: Заключити договір про співпрацю з 250 житловими комплексами та офісами протягом перших двох років.
     SC-1: Збільшення частки зайнятих парковочних місць біля житлових комплексів та офісів на 30%
     SC-2: Високий рейтинг задоволеності користувачів сисеми (загальна оцінка 4.7 з 5) та велика частка позитивних відгуків (90% від загальної кількості).
     SC-3: Заключення договору про співпрацю з 250 житловими комплексами та офісами протягом перших двох років.
     SC-4: Зменшення кількості конфліктів, що виникають через паркувальні місця на 45% протягом першого року.
     
     
     
     1.4. Протреби клієнтів або ринку
     
     
     «Parky» задовільняє потреби одразу декількох груп користувачів: власників офісних приміщень, співробітників офісів та членів житлових комплексів.
     «Parky» дозволяє власникам офісних приміщень ефективно управляти парковками біля їхніх будівель, максимізуючи використання паркувальних місць. Завдяки резервуванню та системі налаштування тарифів власники можуть збільшити прибуток від парковки і загалом підвищити доходи з оренди приміщень. Також їм важливо мати доступ до звітності та статистики використання парковки.
     Щодо співробітників офісів, то вони потребують можливості швидко і в режимі онлайн забронювати паркувальне місце для себе. Також вони бажають мати гарантії, що, прибувши до офісу, їм буде де залишити машину. До того ж, співробітники хочуть мати зручний спосіб оплачувати паркування.
     Говорячи про жителів багатоквартирних будинків, то вони хочуть мати можливість відстежувати наявність вільних паркувальних місць та за необхідності бронювати їх. Також вони хочуть бути впевнені у безпеці парковки та запобігти використанню їхньої парковки жителями із сусідніх будівель.
     Загалом, звернувши увагу на ринок систем управління парковками та наявних конкурентів, можна сказати, що існує потреба у рішеннях, що призначені для вирішення проблем невеликих парковок, що знаходяться біля житлових комплексів та офісних приміщень.
     
     
     
     
     
     1.5 Бізнес-ризики
     
     
     RI-1: Конкуренція на ринку. Даний ризик може серйозно вплинути на успішність проекту, оскілки інші системи управління парковками можуть привертати користувачів, що може призвести до втрати аудиторії. Для запобігання цьому, важливо враховувати думку користувачів, проводити маркетингові заходи, слідкувати за діями конкурентів та пропонувати конкурентні переваги, які виділятимуть систему серед інших.
     RI-2: Зміна потреб і вимог користувачів. Цей ризик може призвести до того, що наша система втратить актуальність та не зможе конкурувати із системами-аналогами. Для уникнення цього, необхідно постійно слідкувати за вподобаннями, потребами та вимогами користувачів, проводити опитування для уточнення побажань клієнтів та вносити відповідні корективи у план розробки проекту. Окрім цього, важливо проектувати систему таким чином, щоб існуючий функціонал можна було без проблем змінити, а новий – легко додати.
     RI-3: Загроза конфіденційності та безпеки даних. Наявність у системі персональних даних користувачів парковками робить її ціллю для атак кібер-злочинців. Втрата особистої інформації користувачів порушує їхню конфіденційність, що призведе до втрати довіри до нашого продукту. Задля уникнення ризику варто дотримуватися вимог захисту персональних даних, використовувати надійні алгоритми шифрування, наприклад, AES або RSA, проводити навчання персоналу з питань кібербезпеки та вчасно оновлювати захисне програмне забезпечення.


2 КОНЦЕПЦІЯ РІШЕННЯ
     2.1 Окреслення концепцій
     
     
     Мета нового продукту – реалізація сучасного рішення для парковок житлових комплексів та офісів, що здатне спростити організацію паркування та зробити його легким та комфортним для жителів багатоквартирних будинків та співробітників офісів. Дане рішення допоможе підвищити ефективність управління парковками, покращити досвід користувачів, а також вирішити проблеми, з якими досить часто зустрічаються ті, хто використовують парковку біля дому або місця роботи.
     Продукт забезпечить власників офісних приміщень та керівництво житлових комплексів потужними інструментами для організації та управління паркінгом, автоматизацією процесів в’їзду та виїзду, підвищить рівень обслуговування користувачів та зменшить часові витрати на рутинні та адміністративні справи, такі як ведення журналу обліку паркувальних місць, ручне виписування чеків на оплату, або ж формування звітів різного роду. На відміну від конкурентів, продукт надає багато можливостей для персоналізації. Користувачі, у свою чергу, отримають можливість бронювати місця для паркування через мобільний застосунок. Також вони матимуть змогу купувати абонементи для паркування, сплачувати рахунки, отримувати звітність про використання парковки, переглядати історію транзакцій. Усе це можна буде зробити онлайн за допомогою смартфона.
     
     
     2.2 Головна функціональність
     
     
     Функціонал системи можна поділити на 3 основні частини: Web, IoT і Mobile.
     Web-функціонал:
     MF-1: Налаштування бронювання на парковці. Налаштування таких параметрів бронювання парковочних місць, як максимальна кількість часу від поточного моменту на яке можна забронювати місце, або ж час, протягом якого бронювання залишається активним.
     MF-2: Бронювання місць на парковці для техніки різних спеціальних служб.
     MF-3: Управління тарифами та абонементами. Можливість створювати нові, налаштовувати існуючі тарифи та абонементи для паркування.
     MF-4: Блокування абонементів користувачам, що порушили правила.
     MF-5: Отримання аналітики та звітів про використання парковки.
     MF-6: Створення резервних копій даних.
     MF-7: Завантаження даних користувачів у систему.
     MF-8: Управління ролями користувачів.
     IoT-функціонал: 
     MF-9: Управління розумними бар’єрами (наприклад, шлагбаумами).
     MF-10: Система розпізнавання номерів машин, для автоматичної ідентифікації користувачів.
     MF-11: Система контролю освітлення для енергозбереження
     Mobile-функціонал
     MF-12: Бронювання паркувального місця.
     MF-13: Відображення історії паркування.
     MF-14: Перегляд історії транзакцій.
     MF-15: Оплата абонементів та рахунків.
     MF-16: Перегляд актуальної інформації про вільні та зайняті місця на парковці.
     
     
     

     2.3 Припущення і залежності
     
     
     AS-1: Доступ клієнтів до необхідних технічних ресурсів: комп’ютери та мережеве з’єднання.
     AS-2: Наявність у користувачів парковками смартфону із доступом в Інтернет.
     AS-3: Позитивне ставлення мешканців житлових комплексів та співробітників офісів до впровадження системи.
     DE-1: Доступність потрібного обладнання та пристроїв, що постачаються іншими виробниками.
     DE-2: Інтеграція із системою оплати для можливості оплачувати абонементи та рахунки.


3 РАМКИ ТА ОБМЕЖЕННЯ ПРОЄКТУ
     3.1 Рамка первинного випуску
     
     
     Первинний випуск програмного продукту буде включати у себе функціонал, який при малих витратах зможе задовільнити базові потреби користувачів. Розглянемо його нижче.
     Web-функціонал:
     F-1: Налаштування бронювання на парковці. Налаштування таких параметрів бронювання парковочних місць, як максимальна кількість часу від поточного моменту на яке можна забронювати місце, або ж час, протягом якого бронювання залишається активним.
     F-2: Бронювання місць на парковці для техніки різних спеціальних служб.
     F-3: Управління тарифами та абонементами. Можливість створювати нові, налаштовувати існуючі тарифи та абонементи для паркування.
     F-4: Блокування абонементів користувачам, що порушили правила.
     F-5: Отримання аналітики та звітів про використання парковки.
     F-6: Створення резервних копій даних.
     F-7: Завантаження даних користувачів у систему.
     F-8: Управління ролями користувачів.
     IoT-функціонал:
     F-9: Управління розумними бар’єрами (шлагбаум).
     Mobile-функціонал:
     F-10: Бронювання паркувального місця.
     F-11: Відображення історії паркувань.
     F-12: Перегляд історії транзакцій.
     F-13: Оплата абонементів та рахунків.
     F-14: Перегляд актуальної інформації про вільні та зайняті місця на парковці.
     Для адміністрування системою в ній буде присутній аккаунт з правами системного адміністратора. Його можливості включатимуть у себе створення резервних копій бази даних та управління ролями користувачів.
     Первинний випуск продукту включатиме у себе дві мови інтерфейсу: українську та англійську. Для досягнення локалізації будуть використані кодові таблиці, RESX-файли та інші доступні засоби обраних іструментів розробки. Також враховується можливість додання більшої кількості мов у наступних випусках.
     Для забезпечення безпеки системи, усі чутливі дані будуть зберігатися у базі даних у зашифрованому вигляді із дотриманням сучасних стандартів шифрування та надійних алгоритмів, таких як AES. Авторизація користувачів у системі буде здійснюватися за допомогою JWT токенів з використанням асиметричного ключа. Окрім цього, доступ до функціоналу системи буде надаватися лише за відповідними ролями користувачів.
     
     
     3.2 Рамки наступних випусків
     
     
     Подальші випуски системи включатимуть у себе наступний функціонал:
     F-1: Система розпізнавання номерів машин, для автоматичної ідентифікації користувачів.
     F-2: Система контролю освітлення для енергозбережння.
     F-3: Система нагадувань та повідомлень.
     F-4: Модуль для організації черг на парковці.
     F-5: Прокладання шляху до місця паркування за допомогою геолокації.
     
     
     

     3.3 Обмеження та винятки
     
     
     LE-1: Первинний випуск продукту повинен бути готовий до 1 червня поточного року.
     LE-2: Усі інструменти розробки мають бути безкоштовними.
     LE-3: Система повинна бути оптимізованою та мати змогу бути розгорнутою на бюджетних серверах.
     LE-4: Система повинна підтримувати щонайменше дві мови: українську та англійську.
     EX-1: Система легко масштабується та може бути використана для управління як малими парковками (близько 20 місць), так і парковками середніх розмірів (від 50 до 150 місць).
     EX-2: Архітектура системи дозволяє легко змінювати вже існуючий функціонал та без проблем додавати новий.


     4 БІЗНЕС-КОНТЕКСТ
     4.1 Профілі зацікавлених сторін
     
     
     Таблиця 1 – Зацікавлені сторони проекту
Зацікавлена сторона
Головна цінність
Ставлення
Головний інтерес
Обмеження
Власники парковок
Покращення ефективності послуг паркуванн, звітність та аналіз діяльності
Вбачають у продукті інструмент для покращення роботи парковки 
Більший, ніж у конкурентів набір функцій; час виходу на ринок
Забезпечення парковок необхідним обладнанням
Персонал парковок
Спрощення управління парковок, полегшення рутинних справ
Очікують високої зручності у користуванні та швидкодії системи
Допомога у виконанні рутинних справ; висока надійність системи; простота використання
Систему легко освоїти
Клієнти парковок
Зручний процес паркування 
Позитивне, очікують, що система матиме підримку смартфонів
Бронювання місця для паркування через смартфон, оплата рахунків онлайн
Наявність смартфону та базові навички його володінням
     
     
     
     
     
     
     
     
     4.2 Пріоритети проекту
     
     
     Таблиця 2 – Пріоритети проекту
Показник
Виконання (етапи)
Обмеження (граничні значення)
Ступінь свободи (допустимий діапазон)
План робіт
Версія 1 доступна 01.06.2024
Можливі відключення світла
Відхилення від плану на максимум 7-8 днів
Функціональність
Система має достатній для задоволення основних потреб користувачів функціонал
Часові рамки виконання проєкту
Не менше 90% зазначеної функціональності має бути реалізовано
Якість
функціональне тестування бекенд-, Web- та Mobile-частин, перевірка працездатності сервоприводів
Часові рамки виконання проєкту
Проходження не менше 95% тестів, відсутність критичних помилок
Персонал
Виконання поставлених задач згідно календарного плану, дотримання правил написання чистого коду та вибір підходящих архітектурних рішень
Всього лише 1 розробник
Присутність невеликої кількості неоптимальних рішень через брак досвіду
Ціна
Закупівля необхідного обладнання для IoT-частини продукту 
Підібрати обладнання за досить низькою ціною
60-70% стипендії
     4.3 Робоче середовище
     
     
     Серверна частина системи буде написана на платформі .NET 8 з використанням мови програмування C# та фреймворку ASP.NET Core. У якості бази даних буде використана СУБД MS SQL Server та ORM Entity Framework для доступу до неї.
     IoT частина системи буде реалізована за допомогою платформи Arduino, мови програмування C++ та середовища розробки Arduino IDE.
     Web-частина застосунку буде написана за допомогою web-фреймворку Angular, HTML, CSS та мови програмування TypeScript.
     Мобільний застосунок для платформи Android буде написано на мові програмування Kotlin та Android SDK, з використанням середовища розробки Android Studio.
     Зв’язок наявних клієнтів з сервером буде здійснюватися через протоколи HTTP/HTTPS.


5 СЕРВЕРНА ЧАСТИНА
     5.1 Огляд архітектури системи та прийнятих інженерних рішень
     
     
     Серверна частина програмної системи – це ASP.NET Core Web API застосунок, написаний на платформі .NET 8 та мові програмування C#. У якості архітектури системи виступає багатошарова архітектура з поділом на 4 рівні: Domain, DAL, BLL та Web API. Вона забезпечує високий рівень абстрактності та надає можливість легко змінювати наявний функціонал та додавати новий.
     Конфігурація проекту зберігається у файлі appsettings.json, який містить налаштування авторизації, рядок підключення до БД, SMTP-налаштування та налаштування оплати.
     У «Infrastructure» знаходяться моделі для налаштування авторизації, підключення до БД, SMTP-налаштувань та налаштувань оплати. Також він містить константи, перерахування, винятки, контейнер інверсії контролю та файли перекладів.
     У «Domain» знаходяться моделі для бази даних.
     «DAL» слугує для забезпечення взаємодії з базою даних.
     «BLL» містить усю бізнес-логіку проекту. Серед цікавих частин коду, можна виділити методи, які слугують для розрахунку ціни за сесію паркування з урахуванням усіх необхідних тарифів. Ціна розраховується за наступною формулою
     
     	S=∑_(i=1)^n▒t_i *P_i	(5.1)
     
де S – ціна за сесію паркування;
n – кількість тарифів;
ti – час, на який сесія перетинається з і-тим тарифом у хвилинах;
Pi – ціна і-го тарифу за хвилину.
     Фрагменти коду наведені у додатку В.
     У директорії «WebAPI» розташовані усі контролери, допоміжні моделі та конфігурація застосунку. 
     У ході розробки серверної частини були використані наступні шаблони проектування: «Unit Of Work», що був обраний для забезпечення цілісності та атомарності операцій з базою даних, та «Dependency Injection» для написання слабко зв’язного коду.
     
     
     5.2 Проектування бази даних
     
     
     Для створення бази даних було виділено наступні сутності: машина («Car»), місце для паркування («ParkingPlace»), бронювання («Booking»), абенемент («Membership»), користувач («User»), абонемент користувача («UserMembership»), сесія паркування («ParkingSession»), оплата («Payment»), токен зміни паролю («ResetPasswordToken»), токен оновлення («RefreshToken»), профіль користувача («UserProfile») та тариф («Tarif»).
     На ER-діаграмі (див. Додаток А рис. 5) наведені зв’язки між цими сутностями, серед яких можна виділити наступні:
     – користувач та машина мають відношення «один-до-багатьох»;
     – користувач та сесія паркування має відношення «один-до-багатьох»;
     – користувач може мати 0 або багато токенів зміни паролю водночас токен відноситься лише до одного користувача – відношення «один-до-багатьох»;
     – користувач може мати 0 або багато токенів оновлення водночас токен відноситься лише до одного користувача – відношення «один-до-багатьох»;
     – користувач може мати один профіль водночас один профіль належить одному користувачу – відношення «один-до-одного»;
     – користувач може мати 0 або багато оплат водночас оплата може не мати або мати лише одного користувача – відношення «один-до-багатьох»;
     – користувач може мати 0 або багато куплених абонементів водночас куплений абонемент відноситься лише до одного користувача – відношення «один-до-багатьох»;
     – абонемент може бути куплений багатьма користувачами водночас куплений абонемент відноситься лише до одного абонемента – відношення «один-до-багатьох»;
     – користувач може мати 0 або багато бронювань водночас бронювання відноситься лише одного користувача – відношення «один-до-багатьох»;
     – місце для паркування може мати 0 або багато бронювань водночас бронювання відноситься лише до одного місця для паркування;
     – тариф не має відношень з іншими сутностями.
     
     
     5.3 Розробка діаграм
     
     
     UML діаграма розгортання демонструє фізичну структуру системи, що розроблюється (див. рис. 5.1).
     Система складається з наступних компонентів: веб застосунку, серверної частини системи, мобільного пристрою, бази даних, персонального комп’ютера та системи управління шлагбаумом на базі Arduino.

Рисунок 5.1 – UML діаграма розгортання

     Взаємодія між частинами системи відбувається за допомогою протоколу HTTPS. Персональний комп’ютер взаємодіє через веб-браузер з веб застосунком через порт номер 80. Веб застосунок, система управління шлагбаумом та додаток на мобільному пристрої підтримуються зв’язок із серверною частиню через порт номер 7061. Серверна частину у свою чергу взаємодіє з базою даних через порт номер 1433.
     UML діаграма прецендентів описує функціональне призначення системи, що створюється та демонструє основні бізнес-можливості користувачів системи (див. Додаток А рис. 4).
     Адміністратор парковки має можливість управляти налаштуваннями парковки, управляти тарифами за паркування, управляти місцями для паркування та управляти абонементами (у тому числі блокувати абонементи користувачам, що порушили правила). Також він має змогу переглядати зареєстрованих у системі користувачів, що включає у себе можливість шукати, фільтрувати та сортувати користувачів, бронювати місця для паркування техніки спеціальних служб, завантажувати дані користувачів у систему та переглядати актуальну інформацію про зайнятість місць для паркування. Окрім цього адміністратор парковки може формувати звіт зі статистикою оплат за певний період та звіт зі статистикою зайнятості парковки за певний період.
     Звичайний користувач має можливість редагувати власний профіль, управляти списком власних транспортних засобів, переглядати історію паркувань та історію транзакцій. Також він має змогу бронювати паркувальне місце, переглядати актуальну інформацію про зайнятість місць для паркування, оплачувати рахунки за паркування та купляти абонементи.
     Системний адміністратор може управляти ролями користувачів та робити резервні копії бази даних.
     Неавторизований користувач може авторизуватися, зареєструватися та змінити пароль, якщо він його забув, отримавши відповідного листа на пошту.
     Шляхом використання діаграми компонентів (див. Додаток А рис. 2 та 3) була відображена структура серверної частини системи, а також з’ясовано зв’язки та залежності між її складовими елементами. З наданої діаграми видно, що контролери є залежними від рівня бізнес-логіки, який, в свою чергу, взаємодіє з рівнем доступу до даних. Ін’єкція репозиторіїв у сервіси системи відбувається за допомогою шаблону «UnitOfWork». Для впровадження залежностей використовується шаблон «Dependency Injection».
     
     
     5.4 Специфікація REST
     
     
     API даного проекту побудовано за принципами RESTful API [2] та складається з багатьох кінцевих точок для забезпечення взаємодії клієнтських частин із серверною частиною застосунку. Було використано стандартні методи HTTP запитів: GET – для отримання даних; POST – для відправки даних на сервер; DELETE – для видалення записів. Передача даних відбувається у форматі JSON.
     Специфікація кожної кінцевої точки наведена у додатку Б.
Всього можна виділити десять контролерів: 
– «AuthController»;
– «AdministrationController»;
– «BookingsController»;
– «CarsController»;
– «MembershipsController»;
– «ParkingPlacesController»;
– «ParkingSessionsController»;
– «PaymentController»;
– «TarifsController»;
– «UsersController».


6 ПРИСТРІЙ ІНТЕРНЕТУ РЕЧЕЙ
     6.1 Огляд архітектури системи та прийнятих інженерних рішень
     
     
     IoT-частина програмної системи «Parky» розроблена на основі платформи Arduino з використанням мови програмування С++. Були використані наступні компоненти: плата NodeMCU V3, серводвигун SG-90 та камера ESP32-CAM.
     Для взаємодії між сервером та IoT приладами було розроблено Windows Forms комп’ютерну програму «GateController» та ряд команд для управління IoT приладами. Фрагменти коду реалізації IoT-частини наведено у додатку Б.
     «GateController» має двошарову архітектуру (Domain та BLL) та використовує Windows Forms у якості інтерфейсу. «Domain» містить моделі, які використовуються у застосунку. У «Infrastructure» знаходяться моделі конфігурації, DI контейнер та перерахування. «BLL» містить необхідні для функціонування застосунку сервіси.
     Обидва IoT застосунки («Camera» та «Gate») також мають двошарову архітектуру з поділом на рівні Domain та BLL. Domain містить моделі, а BLL –необхідні сервіси. Також у проектах присутній файл main.cpp, який виконується на платах.
     
     
     6.2 Побудова діаграм
     
     
     На діаграмі прецедентів (див. рис. 1) можна побачити наступних акторів: адміністратор парковки, користувач, камера та шлагбаум.
     

Рисунок 6.1 – UML діаграма прецедентів IoT-частини програмної системи

     Адміністратор парковки може авторизуватися та налаштувати систему управління шлагбаумом. Користувач має змогу заїхати на парковку та виїхати з неї. Камера фотографує номер авто та за допомогою запиту на зовнішнє API здійснюється розпізнавання номер. Далі відбувається перевірка наявності авто у системі і, якщо авто наявне, шлагбаум відкриває проїзд. Шлагбаум у свою чергу може відкривати та закривати проїзд на парковку.
     На діаграмі взаємодії описано процес обміну даними в системі (див. Додаток А, рис. 2).
     На рисунку бачимо, що процес починається з авторизації адміністратора парковки у комп’ютерній програмі після чого відбувається ініціалізація камери та шлагбаума. Система готова до роботи і очікує на появу авто. Коли біля шлагбаума з’являється авто, камера фотографує його та надсилає зображення на комп’ютерну програму. Програма у свою чергу надсилає зображення на API для розпізнавання номерів автомобілів та отримує номер у відповідь. Далі комп’ютерна програма робить запит на сервер для перевірки наявності авто у системі. Якщо автомобіль є у системі, то шлагбаум відкривається і водій може проїхати. На кінець, шлагбаум закривається і система очікує наступний автомобіль.
     На діаграмі дільності (див. Додаток А, рис. 3) бачимо потік дій, які виконують IoT-пристрої. 
     На початку адміністратор парковки авторизується у комп’ютерній програмі. Далі відбувається ініціалізація камери та шлагбаума. На цьому етапі система готова до роботи та очікує появу автомобіля. Після того як авто з’являється перед шлагбаумом камера робить фото. Далі це фото оброблюється та відбувається перевірка чи наявне авто у системі. Якщо автомобіль наявний у системі, відкривається проїзд і водій може заїхати на парковку. Після цього шлагбаум закривається, а система очікує наступне авто.
     Шляхом використання діаграми компонентів (див. Додаток А, рис. 4) була відображена структура IoT-частини системи, а також показано зв’язки та залежності між її складовими елементами. З діаграми видно, що камера та шлагбаум спілкуються з комп’ютерною програмою «GateController» через COM-port. «GateController» має ряд компонентів: «Client», який взаємодіє із сервером через відповідне API та із IoT-приладами через «SerialClient», «AuthService» та «ParkingSessionService», які залежать від «Client».


7. КЛІЄНТСЬКА ЧАСТИНА
     7.1 Огляд архітектури системи та прийнятих інженерних рішень
     
     
     Клієнтська частина програмної системи «Parky» розроблена за допомогою наступних програмних засобів: веб-фреймворк Angular [3], HTML, SCSS/CSS та мова програмування TypeScript. Фреймворк надає зручні для створення компонентної архітектури інструменти, а TypeScript допомагає легко підтримувати інтерфейс для взаємодії з сервером. Застосунок має компонентну архітектуру, яка дозволяє підтримувати модульність та повторно використовувати компоненти, уникаючи дублювання коду та функціональності. Також така архітектура надає змогу легко підтримувати існуючі компоненти та розширювати застосунок шляхом додавання нових компонентів без необхідності модифікувати існуючі. Проект має 2 головні директорії: «components» та «core». Директорія «components» містить у собі усі компоненти застосунку, а «core» – константи, перерахування, моделі, сервіси та класи-помічники.
     Для впровадження залежностей був використаний механізм «Dependency injection»; для взаємодії з сервером був використаний модуль «HttpClient» із загальної бібліотеки Angular (приклад використання наведено у Додатку Б); для забезпечення програмної системи локалізацією та інтернаціоналізацією було використано бібліотеку «angular-l10n». Було використано шаблон «Декоратор» [4] для забезпечення застосунку тост-повідомленнями з підтримкою локалізації. У результаті було створено сервіс «L10nToastrService», який слугує декоратором для сервісу «ToastrService» з бібліотеки «ngx-toastr» (реалізацію наведено у Додатку Б).


     7.2 Побудова діаграм
     
     
     На діаграмі прецедентів (див. рис. 7.1) можна побачити наступних акторів: адміністратор парковки, системний адміністратор та неавторизований користувач.
     

Рисунок 7.1 – UML діаграма прецедентів клієнтської частини програмної системи

     Неавторизований користувач може зареєструватися у системі та авторизуватися. При реєстрацій він також заповнює профіль користувача. Системний адміністратор має змогу створювати резервні копії даних та змінювати ролі користувачів. Адміністратор парковки може налаштовувати бронювання; бронювати місця на парковці для техніки спеціальних служб; завантажувати дані користувачів у систему; блокувати абонементи користувачів, що порушили правила; переглядати та шукати користувачів; отримувати статистику платежів та статистику зайнятості місць для паркування за певний період часу. Також він має змогу управляти такими колекціями: тарифи, абонементи та місця для паркування
     На діаграмі компонентів (див. Додаток А рис. 2) бачимо структуру клієнтської частини програмної системи «Parky» та зв’язки між її компонентами. На діаграмі зображено «HttpClient», який слугує для зв’язку front-end частини з сервером. Cервіси «administration.service.ts», «auth.service.ts», «booking.service.ts», «membership.service.ts», «parking-place.service.ts», «user-service.ts» та «tarif.service.ts» використовують його з метою доступу до API. Компоненти «Parking places component», «Login component», «Administration component», «Tarifs component», «Registration component», «Memberships component», «Users component» та «Booking component» у свою чергу використовують відповідні сервіси для обробки даних. На кінець, усі компоненти формують модуль – «App.module.ts», який надає інтерфейс усього веб-застосунку. Також бачимо, що «App.module.ts» використовує «App-routing.module.ts» для забезпечення маршрутизації усередині застосунку.
     На діаграмі діяльності (див. Додаток А рис. 3) можна побачити дії, які можна виконати при взаємодії з front-end частиною програмної системи. Для початку користувач має увійти в систему. Також він повинен мати права системного адміністратора чи адміністратора парковки. У випадку, коли користувач їх не має, він не матиме доступу.
     В залежності від прав, користувач зможе виконувати різні дії. Авторизувавшись у системі з правами системного адміністратора, він зможе створювати резервні копії даних, управляти ролями користувачів та вийти із системи.
     Якщо користувач увійде у систему з правами адміністратора парковки, то він зможе налаштовувати бронювання, блокувати абонементи, бронювати місця на парковці для спеціальної техніки, завантажувати дані користувачів у систему та отримувати статистику. Також він зможе управляти колекціями тарифів, абонементів та місць для паркування. У будь-який момент користувач має можливість покинути сайт.
     UML діаграма станів (див. Додаток А рис.4) більш детально відображає процеси, що відбуваються при взаємодії з front-end частиною програмної системи.
     Для входу у систему користувач повинен авторизуватися у системі. Для цього він заповнює форму логіну і, у випадку якщо дані було введено вірно, отримує JWT-токен авторизації. Обов’язковою умовою доступу до сайту є наявність у користувача прав системного адміністратора або адміністратора парковки.
     В залежності від прав, користувач зможе виконувати різні дії. Після успішної авторизації у якості системного адміністратора, користувач має змогу створювати резервні копії даних. Для цього необхідно перейти на вкладку «Адміністрування», ввести шлях збереження та натиснути кнопку «Зробити резервне копіювання». Також він має змогу управляти ролями користувачів. Для цього треба перейти на вкладку «Користувачі» та змінити роль у обраного користувача.
     Після авторизації у системі з правами адміністратора парковки користувач має змогу виконувати наступні дії. Для налаштування бронювання необхідно перейти на вкладку «Адміністрування», занести бажані зміни та натиснути кнопку «Зберегти налаштування». Для блокування абонементів треба перейти на вкладку «Користувачі», натиснути на кнопку «Деталі» у бажаного користувача, після чого у відкритому вікні натиснути кнопку «Заблокувати абонемент» та ввести коментар. Для бронювання місць на парковці для техніки спеціальних служб необхідно перейти на вкладку «Бронювання» та додати бронювання обравши бажану дату на час. Для того, щоб завантажити дані користувачів у систему, треба перейти на вкладку «Користувачі» обрати файл із даними та натиснути кнопку «Завантажити». Для отримання статистики потрібно перейти на відповідну вкладку, обрати період часу та натиснути відповідну кнопку для завантаження звіту.
     Для управління колекціями тарифів, абонементів та місць для паркування необхідно перейти на відповідну вкладку («Тарифи», «Абонементи» або «Місця для паркування») та занести бажані зміни (додати, редагувати чи видалити ту чи іншу сутність).
     Варто також зазначити, що усі дії супроводжуються повідомленнями про успішність чи помилку.


ВИСНОВКИ


     В рамках курсової роботи було розроблено програмну систему для управління парковками житлових комплексів та офісів «Parky», що надає інструменти для ефективного управління парковками власникам офісних приміщень та керівництву житлових комплексів, підвищує рівень обслуговування користувачів та зменшує часові витрати на щоденні та адміністративні справи. У процесі розробки системи було проаналізовано предметну область та наявних конкурентів, описано вимоги до інформаційної системи та виявлено проблеми і потреби головних користувачів продукту: власників офісних приміщень, керівництва житлових комплексів, працівників офісів та мешканців житлових забудов. Окрім цього було отримано досвід із проектування та розробки складної програмної системи з дотриманням принципів чистої архітектури та коду.
     Для реалізації серверної частини було використано платформу .NET Core 8, фреймворк ASP NET Core 8 та мову програмування C#. У якості бази даних було використано СУБД Microsoft SQL Server 2022, ORM Entity Framework Core 8 була задіяна для доступу до даних. Фреймворк PlatformIO та мова програмування C++ були використані для реалізації IoT-частини. Клієнтська частина була розроблена за допомогою фреймворку Angular 17, HTML, SCSS та мови програмування TypeScript. Код реалізованих частин програмної системи завантажено у репозиторій GitHub [5].
     У результаті виконання курсової роботи було розроблено складну інформаційну систему для управління парковками житлових комплексів та офісів, що задовольняє сучасні вимоги ринку і стандарти розробки програмного забезпечення. У результаті функціонального тестування [6] було доведено, що система є працездатною.
     
     
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


     1. Стаття «Who Owns the Most Vehicles per Capita, by Country?». URL: https://www.visualcapitalist.com/vehicles-per-capita-by-country/ (Дата зверення 17.06.2024)
     2. Kanjilal J. ASP.NET Web API: Build RESTful web applications and services on the .NET framework. Packt Publishing, 2013. 224 с.
     3. Фрімен А. Angular для професіоналів. – Україна: Apress, 2020. – 800.
     4. Design patterns: elements of reusable object-oriented software / R. Helm et al. Reading, Mass : Addison-Wesley, 1995. 395 с.
     5. Програмний код розробленої програмної системи. URL: https://github.com/NureKravchenkoYevhenii/apzkr-pzpi-21-5-kravchenko-yevhenii (Дата звернення 17.06.2024)
     6. Функціональне тестування розробленої програмної системи. URL: https://youtu.be/q5Id_KX1ayI (Дата зверення 17.06.2024)
2


